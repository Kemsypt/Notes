<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width,initial-scale=1"/>
<title>Custom Notes — Modular Grid Builder + Snippets & Scripts</title>
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<style>
  :root{
    --bg:#f4f4f4;
    --panel:#fff;
    --ink:#222;
    --muted:#666;
    --primary:#007bff;
    --primary-2:#0056b3;
    --ring: rgba(0,0,0,.08);
    --gap:12px;
    --z-fly: 3000;
    --sidebar-w: 320px;
  }
  html,body{height:100%}
  body{
    font-family: Arial,system-ui,Segoe UI,Roboto,Helvetica,Arial,sans-serif;
    background:var(--bg);
    color:var(--ink);
    margin:0; padding:0;
  }

  /* Top bar */
  .topbar{
    position:sticky; top:0; z-index:2600; /* ensure always clickable above others */
    background:var(--panel);
    box-shadow:0 1px 8px rgba(0,0,0,.08);
    padding:10px 14px;
  }
  .topbar-inner{
    max-width:1100px; margin:0 auto; display:flex; align-items:center; gap:10px; flex-wrap:wrap;
  }
  .title{ font-weight:700; font-size:18px; margin-right:auto; }
  .btn{
    background:var(--primary); color:#fff; border:none; border-radius:6px;
    padding:8px 12px; cursor:pointer; font-size:14px;
  }
  .btn:hover{ background:var(--primary-2); }
  .btn.outline{ background:#fff; color:var(--primary); border:1px solid var(--primary); }
  .btn.icon{ display:inline-flex; align-items:center; gap:8px; padding:8px 10px; }
  .btn.small{ padding:4px 8px; font-size:12px; }
  .icon-only{ width:36px; height:36px; display:inline-grid; place-items:center; padding:0; font-size:18px; }
  .btn.ghost{ background:transparent; color:var(--primary); border:1px dashed var(--primary); }

  .wrap{ max-width:1100px; margin:16px auto; padding:0 14px 90px; }

  /* Grid canvas for boxes */
  .grid{
    display:grid;
    grid-template-columns: repeat(12, minmax(0,1fr));
    gap:var(--gap);
    align-items:start;
    grid-auto-flow: row dense;
  }

  /* Box (card) */
  .box{
    background:var(--panel);
    border-radius:8px;
    box-shadow:0 0 10px rgba(0,0,0,.1);
    border:1px solid var(--ring);
    display:flex; flex-direction:column;
    grid-column: span var(--w, 6);
  }
  .box[draggable="true"]{ cursor:grab; }
  .box.dragging{ opacity:.6; outline:2px dashed var(--primary); }

  .box-head{
    display:flex; align-items:center; gap:8px; padding:8px 10px; border-bottom:1px solid var(--ring);
    background:linear-gradient(#fff,#fafafa);
    position:relative;
  }
  .box-title{
    font-weight:700; flex:1; border:none; background:transparent; font-size:14px; color:var(--ink);
    outline:none; cursor:default;
  }
  .head-tools{ display:flex; align-items:center; gap:6px; }

  /* View-mode Up/Down/X for boxes added from Saved (top-right) */
  .view-controls{ display:none; margin-left:auto; gap:6px; }
  body.mode-view .view-controls[data-enabled="true"]{ display:flex; }

  .box-body{
    padding:10px;
    display:grid;
    grid-template-columns: repeat(12, minmax(0,1fr));
    gap:var(--gap);
  }

  /* Field group */
  .field{
    display:flex; flex-direction:column; gap:8px; position:relative;
    border:1px solid #e5e7eb; border-radius:6px; padding:8px;
    grid-column: span var(--span, 12);
    background:#fff;
  }
  .label-row{ display:flex; align-items:center; gap:6px; flex-wrap:wrap; }
  .field-label{
    font-weight:700; font-size:12px; background:transparent; border:none; outline:none; color:var(--ink); flex:1;
  }
  .field-tools{ display:flex; gap:4px; }

  .field-edit-controls{
    display:flex; gap:8px; align-items:center; flex-wrap:wrap;
  }
  .field-edit-controls select{
    border:1px solid #ccc; border-radius:6px; padding:6px; font-size:12px;
  }

  .inputs-stack{ display:flex; flex-direction:column; gap:var(--gap); }
  .input-wrap{ display:flex; flex-direction:column; gap:6px; }

  .input-wrap input[type="text"],
  .input-wrap input[type="number"],
  .input-wrap input[type="email"],
  .input-wrap input[type="url"],
  .input-wrap input[type="tel"],
  .input-wrap input[type="date"],
  .input-wrap input[type="time"],
  .input-wrap input[type="datetime-local"],
  .input-wrap input[type="color"],
  .input-wrap input[type="range"],
  .input-wrap textarea,
  .input-wrap select{
    width:100%; border:1px solid #ccc; border-radius:6px; padding:8px; box-sizing:border-box; font-size:14px; background:#fff;
  }
  .input-wrap textarea{ min-height:80px; resize:vertical; }

  .mini-controls{
    display:flex; gap:6px; align-items:flex-start; flex-wrap:wrap;
  }
  .mini-controls textarea,
  .mini-controls input[type="text"]{
    border:1px solid #ccc; border-radius:6px; padding:6px; font-size:12px;
  }
  .mini-controls textarea{ width:220px; height:52px; }
  .mini-controls .ph{ width:180px; }
  .mini-controls .sep{ width:90px; }

  .options-edit{ display:flex; flex-wrap:wrap; gap:6px; margin-top:6px; }
  .pill{ padding:4px 8px; border-radius:999px; background:#eef6ff; border:1px solid #cfe4ff; font-size:12px; }
  .pill button{ margin-left:6px; border:none; background:transparent; cursor:pointer; color:#b00; }
  .options-row{ display:flex; gap:6px; margin-top:6px; }
  .options-row input{ flex:1; }

  .map-row{ display:grid; grid-template-columns:1fr 1fr auto auto auto; gap:6px; align-items:center; }
  .map-row input{ border:1px solid #ccc; border-radius:6px; padding:6px; font-size:12px; }
  .map-add{ display:flex; gap:6px; margin-top:6px; }

  .box-foot{
    margin-top:auto; padding:8px 10px; border-top:1px dashed var(--ring);
    display:flex; justify-content:space-between; align-items:center; gap:6px;
  }

  /* Stationary footer (always visible) */
  .footer-bar{
    position:fixed; left:0; right:0; bottom:0; z-index:2500;
    display:flex; justify-content:center; gap:10px;
    background:rgba(255,255,255,.96);
    border-top:1px solid var(--ring);
    padding:10px 14px;
    backdrop-filter:saturate(1.1) blur(4px);
  }

  /* Mode visibility helpers */
  .edit-only{ display:none; }
  body.mode-edit .edit-only{ display:initial; }

  dialog{
    border:1px solid var(--ring); border-radius:10px; padding:12px; max-width:960px; width:min(96vw,960px);
    box-shadow:0 12px 30px rgba(0,0,0,.2);
  }
  dialog::backdrop{ background:rgba(0,0,0,.25) }

  .row{ display:flex; gap:10px; }
  .col{ flex:1; }
  .stack{ display:flex; flex-direction:column; gap:6px; }
  .muted{ color:var(--muted); font-size:12px; }

  /* ======== Sidebar & Toggle ======== */
  .snip-toggle{
    position:fixed; top:50%; transform:translateY(-50%);
    width:36px; height:60px; background:#0d6efd; color:#fff;
    border-radius:0 10px 10px 0; display:grid; place-items:center;
    box-shadow:0 2px 10px rgba(0,0,0,.25); z-index:2200; cursor:pointer;
    left:0;
  }
  .snip-toggle span{ font-size:18px; line-height:1; user-select:none; }

  .snip-sidebar{
    position:fixed; left:0; top:0; bottom:0; width:var(--sidebar-w);
    background:#fff; border-right:1px solid #e5e7eb; box-shadow:4px 0 20px rgba(0,0,0,.1);
    transform:translateX(-100%); transition:transform .2s ease;
    z-index:2100; display:flex; flex-direction:column;
  }
  .snip-sidebar.open{ transform:translateX(0); }
  .snip-head{
    padding:12px; border-bottom:1px solid #f0f0f0; display:flex; align-items:center; gap:8px;
  }
  .snip-tabs{
    display:flex; gap:6px; background:#f5f7ff; padding:4px; border-radius:8px;
  }
  .snip-tab{
    border:none; background:transparent; padding:6px 10px; border-radius:6px; cursor:pointer; font-weight:600; color:#445;
  }
  .snip-tab.active{ background:#fff; box-shadow:0 1px 3px rgba(0,0,0,.08); color:#111; }
  .snip-head .grow{ flex:1; font-weight:700; }
  .snip-body{ padding:10px; overflow:auto; display:flex; flex-direction:column; gap:8px; }
  .snip-item{
    border:1px solid #e6e6e6; border-radius:8px; padding:8px; display:flex; align-items:center; gap:8px;
    background:#fafafa;
  }
  .snip-title{ flex:1; overflow:hidden; text-overflow:ellipsis; white-space:nowrap; font-weight:600; }
  .snip-acts{ display:flex; gap:6px; }
  .snip-acts .btn{ padding:2px 6px; font-size:11px; }
  .snip-empty{ color:#888; font-size:12px; text-align:center; padding:14px 0; }

  @media (max-width:900px){
    .grid{ grid-template-columns: repeat(6, minmax(0,1fr)); }
  }
  @media (max-width:600px){
    .grid{ grid-template-columns: repeat(4, minmax(0,1fr)); }
    .snip-toggle{ bottom:100px; top:auto; transform:none; }
  }

  /* ======== Title Dropdown (TEMPLATES) — HIDDEN BY DEFAULT ======== */
  .title-dd{
    position:absolute;
    min-width:320px;
    max-width:480px;
    background:#fff;
    border:1px solid var(--ring);
    border-radius:10px;
    padding:10px;
    box-shadow:0 12px 30px rgba(0,0,0,.2);
    display:none;
    z-index:2700;
  }
  .title-dd.open{ display:block; }
  .title-dd .tm-save-row{ display:flex; gap:6px; margin-top:6px; }
  .title-dd .tm-save-row input{ flex:1; }
  .title-dd .tm-list > div{
    display:flex; justify-content:space-between; align-items:center; gap:8px;
    padding:6px 0; border-top:1px solid #f0f0f0;
  }
  .title-dd .tm-row-left{ flex:1; min-width:0; }

  /* ======== Multiselect styles ======== */
  .mshell{ position:relative; }
  .ms-btn{
    width:100%; text-align:left; background:#fff; border:1px solid #ccc; border-radius:6px; padding:8px; cursor:pointer;
  }
  .ms-panel{
    position:absolute; top:100%; left:0; right:0;
    background:#fff; border:1px solid #ddd; border-radius:8px; padding:6px; margin-top:4px;
    box-shadow:0 12px 24px rgba(0,0,0,.15);
    display:none; max-height:240px; overflow:auto; z-index:1500;
  }
  .ms-panel.open{ display:block; }
  .ms-item{ display:flex; align-items:center; gap:8px; padding:4px 6px; }
</style>
</head>
<body class="mode-edit">
  <!-- TOP BAR -->
  <div class="topbar">
    <div class="topbar-inner">
      <div class="title">Custom Notes Builder</div>
      <!-- Lock toggle (icon only) to the LEFT of Copy -->
      <button class="btn outline icon-only" id="editToggle" title="Toggle Edit / Regular">
        <span id="lockIcon">🔓</span>
      </button>
      <button class="btn icon" id="copyAll" title="Copy all">Copy</button>
      <button class="btn outline" id="clearAll" title="Clear values">Clear</button>
      <button class="btn" id="openNote" title="Quick note">Note</button>
      <!-- Edit-only actions -->
      <button class="btn edit-only" id="addBox" title="Add Box">Add Box</button>
      <button class="btn outline edit-only" id="exportJson" title="Export JSON">Export</button>
      <button class="btn outline edit-only" id="importJson" title="Import JSON">Import</button>
    </div>
  </div>

  <!-- Sidebar & Toggle -->
  <aside id="snipBar" class="snip-sidebar" aria-hidden="true">
    <div class="snip-head">
      <div class="snip-tabs">
        <button id="tabSnippets" class="snip-tab active" type="button">Snippets</button>
        <button id="tabScripts" class="snip-tab" type="button">Scripts</button>
      </div>
      <div class="grow"></div>
      <button id="snipAdd" class="btn small edit-only">Add</button>
      <button id="snipClose" class="btn small outline">Close</button>
    </div>
    <div id="snipBody" class="snip-body"></div>
  </aside>
  <div id="snipToggle" class="snip-toggle" title="Open panel"><span>▶</span></div>

  <div class="wrap">
    <div id="canvas" class="grid" aria-live="polite"></div>
  </div>

  <!-- Stationary footer -->
  <div class="footer-bar">
    <button class="btn outline" id="openSaved">+ Add Saved Box</button>
    <button class="btn outline edit-only" id="manageSaved">Manage Saved Boxes</button>
  </div>

  <!-- ADD BOX DIALOG -->
  <dialog id="boxDialog">
    <form method="dialog" class="stack">
      <h3 style="margin:0 0 6px 0;">New Box</h3>
      <div class="row">
        <div class="col stack">
          <label>Title
            <input id="boxTitle" type="text" placeholder="e.g., Caller Details" required/>
          </label>
        </div>
        <div class="col stack">
          <label>Width
            <select id="boxW" required>
              <option value="3">25%</option>
              <option value="4">33%</option>
              <option value="6" selected>50%</option>
              <option value="8">66%</option>
              <option value="9">75%</option>
              <option value="12">100%</option>
            </select>
          </label>
        </div>
      </div>
      <div class="muted">Height is automatic based on contents.</div>
      <div style="display:flex; gap:8px; justify-content:flex-end; margin-top:8px;">
        <button value="cancel" class="btn outline">Cancel</button>
        <button id="createBoxBtn" class="btn">Create</button>
      </div>
    </form>
  </dialog>

  <!-- ADD FIELD DIALOG -->
  <dialog id="fieldDialog">
   <form method="dialog" class="stack">
    <h3 style="margin:0 0 6px 0;">Add Field</h3>
    <div class="row">
      <div class="col stack">
        <label>Label
          <input id="fldLabel" type="text" placeholder="e.g., Contact Details" required/>
        </label>
      </div>
      <div class="col stack">
        <label>Field Width in Box
          <select id="fldSpan">
            <option value="12">100%</option>
            <option value="9">75%</option>
            <option value="8">66%</option>
            <option value="6">50%</option>
            <option value="4">33%</option>
            <option value="3">25%</option>
          </select>
        </label>
      </div>
    </div>
    <div class="stack" id="subsWrap"></div>
    <div>
      <button id="addSubBtn" class="btn small" value="__noop">+ Add Input</button>
    </div>
    <div style="display:flex; gap:8px; justify-content:flex-end; margin-top:8px%;">
      <button value="cancel" class="btn outline">Cancel</button>
      <button id="createFieldBtn" class="btn">Add Field</button>
    </div>
   </form>
  </dialog>

  <!-- FREEFORM NOTE DIALOG -->
  <dialog id="noteDialog">
    <form method="dialog" class="stack">
      <h3 style="margin:0 0 6px 0;">Quick Note</h3>
      <textarea id="freeNote" placeholder="Enter a quick note…" style="min-height:120px;"></textarea>
      <div style="display:flex; gap:8px; justify-content:flex-end;">
        <button value="cancel" class="btn outline">Close</button>
        <button id="saveNoteBtn" class="btn">Save to New Box</button>
      </div>
    </form>
  </dialog>

  <!-- SAVED BOXES PICKER -->
  <dialog id="savedDialog">
    <form method="dialog" class="stack">
      <h3 style="margin:0 0 6px 0;">Saved Boxes</h3>
      <div id="savedList" class="stack" style="max-height:50vh; overflow:auto;"></div>
      <div style="display:flex; gap:8px; justify-content:flex-end; margin-top:8px;">
        <button value="cancel" class="btn outline">Close</button>
      </div>
    </form>
  </dialog>

  <!-- MANAGE SAVED BOXES -->
  <dialog id="manageDialog">
    <form method="dialog" class="stack">
      <h3 style="margin:0 0 6px 0;">Manage Saved Boxes</h3>
      <div id="manageList" class="stack" style="max-height:55vh; overflow:auto;"></div>
      <div style="display:flex; gap:8px; justify-content:flex-end; margin-top:8px;">
        <button value="cancel" class="btn outline">Close</button>
        <button id="saveManageBtn" class="btn">Save Changes</button>
      </div>
    </form>
  </dialog>

  <!-- TITLE DROPDOWN (templates) -->
  <div id="titleDropdown" class="title-dd" role="menu" aria-hidden="true">
    <h4 id="tmHeading">Box Templates</h4>
    <div class="muted">Save current box text as a template</div>
    <div class="tm-save-row">
      <input id="tmNewName" type="text" placeholder="Template name (e.g., Standard opener)"/>
      <button id="tmSaveBtn" class="btn small" type="button">Save</button>
    </div>
    <div class="muted" style="margin-top:8px;">Your templates for this box type</div>
    <div id="tmList" class="tm-list"></div>
  </div>

  <!-- ADD/EDIT SNIPPET DIALOG -->
  <dialog id="snippetDialog">
    <form method="dialog" class="stack">
      <h3 id="snipDlgTitle" style="margin:0 0 6px 0;">Add Snippet</h3>
      <label>Title
        <input id="snipTitle" type="text" placeholder="e.g., Greeting" required/>
      </label>
      <label>Text
        <textarea id="snipText" placeholder="Write the text to copy…" style="min-height:160px"></textarea>
      </label>
      <div style="display:flex; gap:8px; justify-content:flex-end; margin-top:8px;">
        <button value="cancel" class="btn outline">Cancel</button>
        <button id="snipSaveBtn" class="btn">Save</button>
      </div>
    </form>
  </dialog>

  <!-- ADD/EDIT SCRIPT DIALOG -->
  <dialog id="scriptDialog">
    <form method="dialog" class="stack">
      <h3 id="scriptDlgTitle" style="margin:0 0 6px 0;">Add Script</h3>
      <label>Title
        <input id="scriptTitle" type="text" placeholder="e.g., Troubleshooting Flow" required/>
      </label>
      <label>Text (shown when clicked)
        <textarea id="scriptText" placeholder="Write the script content…" style="min-height:220px"></textarea>
      </label>
      <div style="display:flex; gap:8px; justify-content:flex-end; margin-top:8px;">
        <button value="cancel" class="btn outline">Cancel</button>
        <button id="scriptSaveBtn" class="btn">Save</button>
      </div>
    </form>
  </dialog>

  <!-- VIEW SCRIPT POPUP -->
  <dialog id="scriptViewDialog">
    <div id="scriptViewContent" style="max-height:70vh; overflow:auto; white-space:pre-wrap;"></div>
  </dialog>

<script>
'use strict';

/* ====== Toast helper (always available) ====== */
function toast(msg){
  try{
    if(!toast.el){
      toast.el = document.createElement("div");
      toast.el.style.cssText = "position:fixed;bottom:58px;left:50%;transform:translateX(-50%);background:#111;color:#fff;padding:8px 12px;border-radius:8px;opacity:0;transition:.2s;z-index:4000";
      document.body.appendChild(toast.el);
    }
    toast.el.textContent = msg;
    toast.el.style.opacity = "1";
    setTimeout(()=> toast.el.style.opacity = "0", 1600);
  }catch(_){}
}

/* ====== Safe helpers ====== */
function $(id){ return document.getElementById(id); }
function on(el, ev, fn){ if(el && el.addEventListener){ el.addEventListener(ev, fn); } }

/* ====== App in a safe boot ====== */
document.addEventListener('DOMContentLoaded', function(){
  try{
    appBoot();
  }catch(err){
    console.error(err);
    toast("Init error: " + (err && err.message ? err.message : err));
  }
});

function appBoot(){

/* ========= Storage Keys ========= */
const STORE_VERSION = "v13b";
const LS_PACK = "customNotes.pack."+STORE_VERSION;

// Legacy mirror keys (kept for backward compatibility)
const LS_KEY   = "customNotes.grid.v8";
const LS_MODE  = "customNotes.mode";
const LS_SAVED = "customNotes.savedBoxes.v1";
const LS_TEXTT = "customNotes.textTemplates.v2";

/* ========= DOM Refs ========= */
const canvas     = $("canvas");
const addBoxBtn  = $("addBox");
const copyAllBtn = $("copyAll");
const clearAllBtn= $("clearAll");
const exportBtn  = $("exportJson");
const importBtn  = $("importJson");
const noteBtn    = $("openNote");
const editToggle = $("editToggle");
const lockIcon   = $("lockIcon");
const openSavedBtn = $("openSaved");
const manageSavedBtn= $("manageSaved");

const boxDialog  = $("boxDialog");
const boxTitle   = $("boxTitle");
const boxW       = $("boxW");

const fieldDialog= $("fieldDialog");
const fldLabel   = $("fldLabel");
const fldSpan    = $("fldSpan");
const subsWrap   = $("subsWrap");
const addSubBtn  = $("addSubBtn");

const noteDialog = $("noteDialog");
const freeNote   = $("freeNote");

const savedDialog= $("savedDialog");
const savedList  = $("savedList");

const manageDialog= $("manageDialog");
const manageList  = $("manageList");
const saveManageBtn= $("saveManageBtn");

const titleDD    = $("titleDropdown");
const tmHeading  = $("tmHeading");
const tmNewName  = $("tmNewName");
const tmSaveBtn  = $("tmSaveBtn");
const tmList     = $("tmList");

// Sidebar & tabs
const snipToggle = $("snipToggle");
const snipBar    = $("snipBar");
const snipBody   = $("snipBody");
const snipClose  = $("snipClose");
const snipAddBtn = $("snipAdd");
const tabSnippets= $("tabSnippets");
const tabScripts = $("tabScripts");

// Snippet dialog
const snippetDialog = $("snippetDialog");
const snipDlgTitle  = $("snipDlgTitle");
const snipTitle     = $("snipTitle");
const snipText      = $("snipText");
const snipSaveBtn   = $("snipSaveBtn");

// Script dialogs
const scriptDialog = $("scriptDialog");
const scriptDlgTitle= $("scriptDlgTitle");
const scriptTitle   = $("scriptTitle");
const scriptText    = $("scriptText");
const scriptSaveBtn = $("scriptSaveBtn");
const scriptViewDialog = $("scriptViewDialog");
const scriptViewContent= $("scriptViewContent");

/* ========= App State ========= */
let boxes = []; // Box: {id,title,w,fields:[ Field ], canMoveInView?}
let savedBoxes = []; // saved layouts/templates
let textTemplates = []; // {id, schemaSig, name, entries:[{path,text}]}
let snippets = []; // {id, title, text}
let scripts  = []; // {id, title, text}

let targetBoxIdForNewField = null;
let isEditMode = true;

let ddOpenForBoxId = null;
let ddAnchorEl = null;

let editingSnippetId = null;
let editingScriptId  = null;

let sidebarTab = "snippets"; // or "scripts"

/* ========= Small utils ========= */
function uid(){ return Math.random().toString(36).slice(2,9); }
function escapeHtml(s){ return (s||"").replace(/[&<>"']/g,(c)=>({ "&":"&amp;","<":"&lt;",">":"&gt;","\"":"&quot;","'":"&#39;" }[c])); }
function btn(txt, classes, onClick, title){
  const b = document.createElement("button");
  b.type="button"; b.className = "btn " + (classes||""); b.textContent = txt;
  if(title) b.title = title;
  b.addEventListener("click", onClick);
  return b;
}
function labelWrap(text, el){
  const w=document.createElement("label");
  const span=document.createElement("div"); span.className="muted"; span.textContent=text;
  w.append(span, el);
  return w;
}

/* ========= Persistence ========= */
function packState(){
  return {
    __version: STORE_VERSION,
    mode: isEditMode ? "edit" : "view",
    boxes,
    savedBoxes,
    textTemplates,
    snippets,
    scripts
  };
}
function saveAll(){
  const pack = packState();
  try{ localStorage.setItem(LS_PACK, JSON.stringify(pack)); }catch(_){}
  try{ localStorage.setItem(LS_MODE, pack.mode); }catch(_){}
  try{ localStorage.setItem(LS_KEY, JSON.stringify(pack.boxes)); }catch(_){}
  try{ localStorage.setItem(LS_SAVED, JSON.stringify(pack.savedBoxes)); }catch(_){}
  try{ localStorage.setItem(LS_TEXTT, JSON.stringify(pack.textTemplates)); }catch(_){}
  try{ localStorage.setItem("customNotes.snippets", JSON.stringify(snippets)); }catch(_){}
  try{ localStorage.setItem("customNotes.scripts", JSON.stringify(scripts)); }catch(_){}
}
function loadAll(){
  let pack = null;
  try{
    const raw = localStorage.getItem(LS_PACK);
    if(raw) pack = JSON.parse(raw);
  }catch(_){}
  if(!pack){
    // legacy fallback
    let mode = "edit";
    try{ mode = localStorage.getItem(LS_MODE) || "edit"; }catch(_){}
    let b=[]; let sb=[]; let tt=[]; let sn=[]; let sc=[];
    try{ b = JSON.parse(localStorage.getItem(LS_KEY)) || []; }catch(_){}
    try{ sb= JSON.parse(localStorage.getItem(LS_SAVED)) || []; }catch(_){}
    try{ tt= JSON.parse(localStorage.getItem(LS_TEXTT)) || []; }catch(_){}
    try{ sn= JSON.parse(localStorage.getItem("customNotes.snippets")) || []; }catch(_){}
    try{ sc= JSON.parse(localStorage.getItem("customNotes.scripts")) || []; }catch(_){}
    pack = { __version: STORE_VERSION, mode, boxes:b, savedBoxes:sb, textTemplates:tt, snippets:sn, scripts:sc };
    try{ localStorage.setItem(LS_PACK, JSON.stringify(pack)); }catch(_){}
  }
  isEditMode = (pack.mode === "edit");
  boxes = Array.isArray(pack.boxes) ? pack.boxes : seedInitial();
  boxes.forEach(function(b){ if(typeof b.w!=="number") b.w = 6; });
  savedBoxes = Array.isArray(pack.savedBoxes) ? pack.savedBoxes : [];
  textTemplates = Array.isArray(pack.textTemplates) ? pack.textTemplates : [];
  snippets = Array.isArray(pack.snippets) ? pack.snippets : [];
  scripts  = Array.isArray(pack.scripts)  ? pack.scripts  : [];
}

function seedInitial(){
  return [{
    id: uid(),
    title: "Call Summary",
    w: 6,
    fields: [
      {
        id: uid(), label:"Caller", span:6,
        items:[
          { id: uid(), type:"text", options:[], value:"", copyBefore:"Name: ",  copyAfter:"; ", placeholder:"Full name" },
          { id: uid(), type:"text", options:[], value:"", copyBefore:"Phone: ", copyAfter:"; ", placeholder:"+61 ..." }
        ]
      },
      {
        id: uid(), label:"Reason", span:6,
        items:[
          { id: uid(), type:"textarea", options:[], value:"", copyBefore:"Reason: ", copyAfter:"\n", placeholder:"Describe reason..." }
        ]
      }
    ]
  }];
}

/* ========= Mode ========= */
function updateModeClass(){
  if(isEditMode){
    document.body.classList.add("mode-edit");
    document.body.classList.remove("mode-view");
    if(lockIcon) lockIcon.textContent = "🔓";
  }else{
    document.body.classList.add("mode-view");
    document.body.classList.remove("mode-edit");
    if(lockIcon) lockIcon.textContent = "🔒";
  }
}

/* ========= Render ========= */
function render(){
  const mount = document.getElementById("canvas");
  if(!mount) return;
  mount.innerHTML = "";
  boxes.forEach(function(box){ mount.appendChild(renderBox(box)); });
  if(isEditMode) attachDnD();
}

function renderBox(model){
  const card = document.createElement("div");
  card.className = "box";
  card.style.setProperty("--w", model.w);
  card.draggable = isEditMode;
  card.dataset.boxId = model.id;

  const head = document.createElement("div"); head.className = "box-head";

  const title = document.createElement("input"); title.className="box-title";
  title.value = model.title;
  title.readOnly = !isEditMode;
  title.addEventListener("input", function(e){ model.title = e.target.value; saveAll(); });
  title.addEventListener("click", function(e){
    if(isEditMode) return;
    e.stopPropagation();
    toggleTitleDD(model, title);
  });

  const widthWrap = document.createElement("div"); widthWrap.className = "head-tools edit-only";
  const wSel = document.createElement("select");
  [["3","25%"],["4","33%"],["6","50%"],["8","66%"],["9","75%"],["12","100%"]].forEach(function(pair){
    const v=pair[0], t=pair[1];
    const o=document.createElement("option"); o.value=v; o.textContent=t; if(String(model.w)===v) o.selected=true; wSel.append(o);
  });
  wSel.addEventListener("change", function(e){
    model.w = parseInt(e.target.value,10)||6;
    card.style.setProperty("--w", model.w);
    saveAll();
  });
  widthWrap.append(wSel);

  const saveBtn = btn("Save","small outline edit-only", function(){ saveBoxTemplate(model); }, "Save this box as template");

  const tools = document.createElement("div"); tools.className="head-tools edit-only";
  const up = btn("↑","small outline", function(){ moveBox(model.id,-1); }, "Move earlier");
  const down = btn("↓","small outline", function(){ moveBox(model.id,1); }, "Move later");
  const del = btn("🗑","small outline", function(){ removeBox(model.id); }, "Delete box");
  tools.append(up,down,del);

  const viewCtrls = document.createElement("div");
  viewCtrls.className = "view-controls";
  if(model.canMoveInView) viewCtrls.dataset.enabled = "true";
  const vUp   = btn("↑","small outline", function(){ moveBox(model.id,-1); }, "Move up");
  const vDown = btn("↓","small outline", function(){ moveBox(model.id,1); },  "Move down");
  const vDel  = btn("✖","small outline", function(){ removeBox(model.id); }, "Remove this box");
  viewCtrls.append(vUp, vDown, vDel);

  head.append(title, widthWrap, saveBtn, tools, viewCtrls);

  const body = document.createElement("div"); body.className="box-body";
  (model.fields||[]).forEach(function(f){ body.appendChild(renderField(model, f)); });

  const foot = document.createElement("div"); foot.className="box-foot";
  const hint = document.createElement("div"); hint.className="muted edit-only"; hint.textContent="Drag card to reorder • Width sets 25/33/50/66/75/100%";
  const addFieldBtn = btn("+ Field","small edit-only", function(){
    targetBoxIdForNewField = model.id;
    openFieldDialog();
  });
  foot.append(hint, addFieldBtn);

  card.append(head,body,foot);
  return card;
}

function renderField(boxModel, fieldModel){
  if(!fieldModel.span) fieldModel.span = 12;

  const wrap = document.createElement("div");
  wrap.className="field";
  wrap.dataset.fieldId = fieldModel.id;
  wrap.style.setProperty("--span", fieldModel.span);

  const row = document.createElement("div"); row.className="label-row";
  const label = document.createElement("input"); label.className="field-label";
  label.value = fieldModel.label || "Field";
  label.readOnly = !isEditMode;
  label.addEventListener("input", function(e){ fieldModel.label = e.target.value; saveAll(); });

  const tools = document.createElement("div"); tools.className="field-tools edit-only";
  const del = btn("✖","small outline", function(){
    boxModel.fields = boxModel.fields.filter(function(f){ return f.id!==fieldModel.id; });
    saveAll(); render();
  },"Remove field");
  const toTop = btn("⇡","small outline", function(){
    const idx = boxModel.fields.findIndex(function(f){return f.id===fieldModel.id;});
    if(idx>0){ const tmp=boxModel.fields[idx-1]; boxModel.fields[idx-1]=boxModel.fields[idx]; boxModel.fields[idx]=tmp; saveAll(); render(); }
  },"Move field up");
  const toBot = btn("⇣","small outline", function(){
    const idx = boxModel.fields.findIndex(function(f){return f.id===fieldModel.id;});
    if(idx<boxModel.fields.length-1){ const tmp=boxModel.fields[idx+1]; boxModel.fields[idx+1]=boxModel.fields[idx]; boxModel.fields[idx]=tmp; saveAll(); render(); }
  },"Move field down");
  tools.append(toTop,toBot,del);
  row.append(label,tools);

  const fc = document.createElement("div"); fc.className="field-edit-controls edit-only";
  const wSel = document.createElement("select");
  [["12","100%"],["9","75%"],["8","66%"],["6","50%"],["4","33%"],["3","25%"]].forEach(function(pair){
    const v=pair[0], t=pair[1];
    const o=document.createElement("option"); o.value=v; o.textContent=t; if(String(fieldModel.span)===v) o.selected=true; wSel.append(o);
  });
  wSel.addEventListener("change", function(e){
    fieldModel.span = parseInt(e.target.value,10)||12;
    wrap.style.setProperty("--span", fieldModel.span);
    saveAll();
  });
  fc.append(labelWrap("Width", wSel));

  wrap.append(row, fc);

  const stack = document.createElement("div"); stack.className="inputs-stack";
  (fieldModel.items||[]).forEach(function(item){ stack.appendChild(renderItem(item)); });
  wrap.append(stack);

  return wrap;
}

/* ========= Field Types ========= */
const TYPE_OPTIONS = [
  ["text","Single line"],
  ["textarea","Multi line"],
  ["select","Dropdown"],
  ["multiselect","Dropdown (multi)"],
  ["mapselect","Dropdown → Custom Text"],
  ["mapmultiselect","Dropdown (multi) → Custom Text"],
  ["number","Number"],
  ["email","Email"],
  ["url","URL"],
  ["tel","Phone"],
  ["date","Date"],
  ["time","Time"],
  ["datetime","Date & Time"],
  ["color","Color"],
  ["range","Slider 0–100"],
  ["checkbox","Checkbox"],
  ["chips","Tags / Chips"],
  ["timerange","Time Range"],
  ["daterange","Date Range"],
  ["buttons","Buttons (run JavaScript)"]
];

function renderItem(item){
  const iw = document.createElement("div");
  iw.className = "input-wrap";

  // mini controls (edit): type + placeholder + separator + copy before/after
  const mini = document.createElement("div"); mini.className="mini-controls edit-only";

  const typeSel = document.createElement("select");
  TYPE_OPTIONS.forEach(function(pair){
    const val=pair[0], txt=pair[1];
    const o=document.createElement("option"); o.value=val; o.textContent=txt; if(item.type===val) o.selected=true; typeSel.append(o);
  });
  typeSel.addEventListener("change", function(e){
    item.type = e.target.value;
    // initialize defaults
    if(item.type==="multiselect" || item.type==="chips" || item.type==="mapmultiselect") item.value = [];
    else if(item.type==="checkbox") item.value = false;
    else if(item.type==="range") item.value = 50;
    else if(item.type==="timerange" || item.type==="daterange") item.value = {start:"", end:""};
    else item.value = "";
    if(item.type==="select" || item.type==="multiselect") item.options = item.options || [];
    if(item.type==="mapselect" || item.type==="mapmultiselect") item.map = item.map || []; // [{label,text}]
    if(item.type==="buttons") item.buttons = item.buttons || []; // [{label, code}]
    saveAll(); render();
  });

  const ph = document.createElement("input"); ph.type="text"; ph.className="ph"; ph.placeholder="Placeholder…";
  ph.value = item.placeholder || "";
  ph.addEventListener("input", function(e){ item.placeholder = e.target.value; saveAll(); });

  // Separator (edit-only visible for multi types)
  const sep = document.createElement("input"); sep.type="text"; sep.className="sep"; sep.placeholder="Separator";
  sep.value = (item.sep != null ? item.sep : ",");
  sep.addEventListener("input", function(e){ item.sep = e.target.value; saveAll(); });

  const beforeTA = document.createElement("textarea"); beforeTA.placeholder="Copy BEFORE…";
  beforeTA.value = item.copyBefore || "";
  beforeTA.addEventListener("input", function(e){ item.copyBefore = e.target.value; saveAll(); });

  const afterTA = document.createElement("textarea"); afterTA.placeholder="Copy AFTER…";
  afterTA.value = item.copyAfter || "";
  afterTA.addEventListener("input", function(e){ item.copyAfter = e.target.value; saveAll(); });

  function showSep(t){ return (t==="multiselect" || t==="mapmultiselect" || t==="chips"); }
  mini.append(typeSel, ph);
  if(showSep(item.type)) mini.append(sep);
  mini.append(beforeTA, afterTA);
  iw.append(mini);

  /* Options editor (select/multiselect) — EDIT ONLY */
  if(item.type==="select" || item.type==="multiselect"){
    const editRow = document.createElement("div"); editRow.className="options-edit edit-only";
    (item.options||[]).forEach(function(opt, idx){
      const chip = document.createElement("span"); chip.className="pill"; chip.textContent = opt;
      const up = document.createElement("button"); up.type="button"; up.textContent="↑";
      const dn = document.createElement("button"); dn.type="button"; dn.textContent="↓";
      const rm = document.createElement("button"); rm.type="button"; rm.textContent="×";
      up.addEventListener("click",function(){ if(idx>0){ const t=item.options[idx]; item.options.splice(idx,1); item.options.splice(idx-1,0,t); saveAll(); render(); }});
      dn.addEventListener("click",function(){ if(idx<(item.options||[]).length-1){ const t=item.options[idx]; item.options.splice(idx,1); item.options.splice(idx+1,0,t); saveAll(); render(); }});
      rm.addEventListener("click", function(){
        item.options = (item.options||[]).filter(function(v){ return v!==opt; });
        if(item.type==="select" && item.value===opt) item.value="";
        if(item.type==="multiselect" && Array.isArray(item.value)) item.value = item.value.filter(function(v){return v!==opt;});
        saveAll(); render();
      });
      chip.append(up,dn,rm);
      editRow.append(chip);
    });
    iw.append(editRow);

    const row2 = document.createElement("div"); row2.className="options-row edit-only";
    const inp = document.createElement("input"); inp.type="text"; inp.placeholder="Add option…";
    const add = document.createElement("button"); add.className="btn small"; add.textContent="Add"; add.type="button";
    add.addEventListener("click",function(){
      const val = (inp.value||"").trim();
      if(!val) return;
      item.options = item.options||[];
      if(item.options.indexOf(val)===-1) item.options.push(val);
      if(item.type==="select" && !item.value) item.value = val;
      inp.value="";
      saveAll(); render();
    });
    row2.append(inp,add);
    iw.append(row2);
  }

  /* Mapping editor (mapselect/mapmultiselect) — EDIT ONLY */
  if(item.type==="mapselect" || item.type==="mapmultiselect"){
    item.map = item.map || [];
    const list = document.createElement("div"); list.className="edit-only";
    (item.map).forEach(function(pair,idx){
      const r = document.createElement("div"); r.className="map-row";
      const label = document.createElement("input"); label.type="text"; label.placeholder="Option label"; label.value=pair.label||"";
      const text  = document.createElement("input"); text.type="text"; text.placeholder="Custom text to copy"; text.value=pair.text||"";
      const up = document.createElement("button"); up.type="button"; up.className="btn small outline"; up.textContent="↑";
      const dn = document.createElement("button"); dn.type="button"; dn.className="btn small outline"; dn.textContent="↓";
      const rm = document.createElement("button"); rm.type="button"; rm.className="btn small outline"; rm.textContent="×";
      label.addEventListener("input", function(){ pair.label=label.value; saveAll(); });
      text.addEventListener("input", function(){ pair.text=text.value; saveAll(); });
      up.addEventListener("click", function(){ if(idx>0){ const t=item.map[idx]; item.map.splice(idx,1); item.map.splice(idx-1,0,t); saveAll(); render(); }});
      dn.addEventListener("click", function(){ if(idx<item.map.length-1){ const t=item.map[idx]; item.map.splice(idx,1); item.map.splice(idx+1,0,t); saveAll(); render(); }});
      rm.addEventListener("click", function(){ item.map.splice(idx,1); saveAll(); render(); });
      r.append(label,text,up,dn,rm);
      list.append(r);
    });
    const addR = document.createElement("div"); addR.className="map-add edit-only";
    const lIn = document.createElement("input"); lIn.type="text"; lIn.placeholder="Option label…";
    const tIn = document.createElement("input"); tIn.type="text"; tIn.placeholder="Custom text…";
    const addBtn = document.createElement("button"); addBtn.type="button"; addBtn.className="btn small"; addBtn.textContent="Add";
    addBtn.addEventListener("click", function(){
      const L=(lIn.value||"").trim(); const T=(tIn.value||"").trim();
      if(!L) return;
      item.map.push({label:L, text:T});
      lIn.value=""; tIn.value="";
      saveAll(); render();
    });
    addR.append(lIn,tIn,addBtn);
    iw.append(list, addR);
  }

  /* Buttons field editor — EDIT ONLY */
  if(item.type==="buttons"){
    item.buttons = item.buttons || [];
    const list = document.createElement("div"); list.className="edit-only";
    (item.buttons).forEach(function(btnObj, idx){
      const block = document.createElement("div");
      block.style.border="1px dashed #ddd"; block.style.borderRadius="8px"; block.style.padding="8px"; block.style.marginBottom="6px";
      const name = document.createElement("input"); name.type="text"; name.placeholder="Button label"; name.value=btnObj.label||"";
      const code = document.createElement("textarea"); code.placeholder="JavaScript to run when clicked"; code.value=btnObj.code||""; code.style.minHeight="80px";
      const row = document.createElement("div"); row.style.display="flex"; row.style.gap="6px"; row.style.marginTop="6px";
      const up = document.createElement("button"); up.type="button"; up.className="btn small outline"; up.textContent="↑";
      const dn = document.createElement("button"); dn.type="button"; dn.className="btn small outline"; dn.textContent="↓";
      const rm = document.createElement("button"); rm.type="button"; rm.className="btn small outline"; rm.textContent="×";
      name.addEventListener("input", function(){ btnObj.label=name.value; saveAll(); });
      code.addEventListener("input", function(){ btnObj.code=code.value; saveAll(); });
      up.addEventListener("click", function(){ if(idx>0){ const t=item.buttons[idx]; item.buttons.splice(idx,1); item.buttons.splice(idx-1,0,t); saveAll(); render(); }});
      dn.addEventListener("click", function(){ if(idx<item.buttons.length-1){ const t=item.buttons[idx]; item.buttons.splice(idx,1); item.buttons.splice(idx+1,0,t); saveAll(); render(); }});
      rm.addEventListener("click", function(){ item.buttons.splice(idx,1); saveAll(); render(); });
      row.append(up,dn,rm);
      block.append(labelWrap("Name",name), labelWrap("JavaScript",code), row);
      list.append(block);
    });
    const addB = document.createElement("button"); addB.type="button"; addB.className="btn small edit-only"; addB.textContent="+ Add Button";
    addB.addEventListener("click", function(){ item.buttons.push({label:"Run", code:"alert('Hello');"}); saveAll(); render(); });
    iw.append(list, addB);
  }

  // Actual control (view/edit display)
  iw.append(renderControl(item));
  return iw;
}

function renderControl(item){
  let el;
  switch(item.type){
    case "text":{
      el = document.createElement("input"); el.type="text"; el.value=(item.value!=null?item.value:"");
      el.placeholder=item.placeholder||"Enter value…";
      el.addEventListener("input", function(e){ item.value=e.target.value; saveAll(); });
      break;
    }
    case "textarea":{
      el = document.createElement("textarea"); el.value=(item.value!=null?item.value:"");
      el.placeholder=item.placeholder||"Enter details…";
      el.addEventListener("input", function(e){ item.value=e.target.value; saveAll(); });
      break;
    }
    case "number":{
      el = document.createElement("input"); el.type="number"; el.value=(item.value!=null?item.value:"");
      el.placeholder=item.placeholder||"";
      el.addEventListener("input", function(e){ item.value=e.target.value; saveAll(); });
      break;
    }
    case "email":{
      el = document.createElement("input"); el.type="email"; el.value=(item.value!=null?item.value:"");
      el.placeholder=item.placeholder||"name@example.com";
      el.addEventListener("input", function(e){ item.value=e.target.value; saveAll(); });
      break;
    }
    case "url":{
      el = document.createElement("input"); el.type="url"; el.value=(item.value!=null?item.value:"");
      el.placeholder=item.placeholder||"https://…";
      el.addEventListener("input", function(e){ item.value=e.target.value; saveAll(); });
      break;
    }
    case "tel":{
      el = document.createElement("input"); el.type="tel"; el.value=(item.value!=null?item.value:"");
      el.placeholder=item.placeholder||"+61 …";
      el.addEventListener("input", function(e){ item.value=e.target.value; saveAll(); });
      break;
    }
    case "date":{
      el = document.createElement("input"); el.type="date"; el.value=(item.value!=null?item.value:"");
      el.addEventListener("input", function(e){ item.value=e.target.value; saveAll(); });
      break;
    }
    case "time":{
      el = document.createElement("input"); el.type="time"; el.value=(item.value!=null?item.value:"");
      el.addEventListener("input", function(e){ item.value=e.target.value; saveAll(); });
      break;
    }
    case "datetime":{
      el = document.createElement("input"); el.type="datetime-local"; el.value=(item.value!=null?item.value:"");
      el.addEventListener("input", function(e){ item.value=e.target.value; saveAll(); });
      break;
    }
    case "color":{
      el = document.createElement("input"); el.type="color"; el.value=(item.value!=null?item.value:"#000000");
      el.addEventListener("input", function(e){ item.value=e.target.value; saveAll(); });
      break;
    }
    case "range":{
      const wrap = document.createElement("div"); wrap.style.display="flex"; wrap.style.gap="8px"; wrap.style.alignItems="center";
      const slider = document.createElement("input"); slider.type="range"; slider.min="0"; slider.max="100"; slider.value=(item.value!=null?item.value:50);
      const out = document.createElement("input"); out.type="number"; out.min="0"; out.max="100"; out.style.width="80px"; out.value=(item.value!=null?item.value:50);
      slider.addEventListener("input", function(){ out.value = slider.value; item.value = Number(slider.value); saveAll(); });
      out.addEventListener("input", function(){ var v = Math.max(0, Math.min(100, Number(out.value||0))); slider.value=v; item.value=v; saveAll(); });
      wrap.append(slider,out); el = wrap; break;
    }
    case "checkbox":{
      const wrap=document.createElement("label"); wrap.style.display="flex"; wrap.style.alignItems="center"; wrap.style.gap="8px";
      const cb=document.createElement("input"); cb.type="checkbox"; cb.checked = !!item.value;
      const span=document.createElement("span"); span.textContent="Yes / No";
      cb.addEventListener("change", function(){ item.value = cb.checked; saveAll(); });
      wrap.append(cb,span); el=wrap; break;
    }
    case "chips":{
      const wrap=document.createElement("div"); wrap.style.display="flex"; wrap.style.flexWrap="wrap"; wrap.style.gap="6px";
      const input=document.createElement("input"); input.type="text"; input.placeholder=item.placeholder||"Type and press Enter…"; input.style.flex="1 0 100%";
      function draw(){
        wrap.innerHTML="";
        (Array.isArray(item.value)? item.value: []).forEach(function(tag,idx){
          const chip=document.createElement("span"); chip.className="pill"; chip.textContent=tag;
          const x=document.createElement("button"); x.type="button"; x.textContent="×";
          x.addEventListener("click", function(){ item.value=item.value.filter(function(_,i){return i!==idx;}); saveAll(); draw(); });
          chip.append(x); wrap.append(chip);
        });
        wrap.append(input);
      }
      input.addEventListener("keydown", function(e){
        if(e.key==="Enter"){
          e.preventDefault();
          const t=(input.value||"").trim(); if(!t) return;
          item.value = Array.isArray(item.value)? item.value: [];
          item.value.push(t); input.value=""; saveAll(); draw();
        }
      });
      draw(); el=wrap; break;
    }
    case "timerange":{
      const wrap=document.createElement("div"); wrap.style.display="flex"; wrap.style.gap="6px";
      const a=document.createElement("input"); a.type="time"; const b=document.createElement("input"); b.type="time";
      const v = item.value || {start:"", end:""}; a.value=v.start||""; b.value=v.end||"";
      a.addEventListener("input", function(){ item.value={start:a.value, end:b.value}; saveAll(); });
      b.addEventListener("input", function(){ item.value={start:a.value, end:b.value}; saveAll(); });
      wrap.append(a,document.createTextNode("–"),b); el=wrap; break;
    }
    case "daterange":{
      const wrap=document.createElement("div"); wrap.style.display="flex"; wrap.style.gap="6px";
      const a=document.createElement("input"); a.type="date"; const b=document.createElement("input"); b.type="date";
      const v = item.value || {start:"", end:""}; a.value=v.start||""; b.value=v.end||"";
      a.addEventListener("input", function(){ item.value={start:a.value, end:b.value}; saveAll(); });
      b.addEventListener("input", function(){ item.value={start:a.value, end:b.value}; saveAll(); });
      wrap.append(a,document.createTextNode("–"),b); el=wrap; break;
    }
    case "select":{
      el = document.createElement("select");
      (item.options||[]).forEach(function(opt){
        const o = document.createElement("option"); o.textContent=opt; o.value=opt;
        el.append(o);
      });
      el.value = item.value||"";
      el.addEventListener("change", function(e){ item.value = e.target.value; saveAll(); });
      break;
    }
    case "multiselect":{
      el = document.createElement("div"); el.className="mshell";
      const btnEl = document.createElement("button"); btnEl.type="button"; btnEl.className="ms-btn";
      btnEl.textContent = formatMultiLabel(item);
      const panel = document.createElement("div"); panel.className="ms-panel";
      (item.options||[]).forEach(function(opt){
        const row = document.createElement("label"); row.className="ms-item";
        const cb = document.createElement("input"); cb.type="checkbox"; cb.checked = (Array.isArray(item.value) && item.value.indexOf(opt)!==-1);
        cb.addEventListener("change", function(){
          let arr = Array.isArray(item.value) ? item.value.slice() : [];
          if(cb.checked){ if(arr.indexOf(opt)===-1) arr.push(opt); }
          else{ arr = arr.filter(function(v){return v!==opt;}); }
          item.value = arr;
          btnEl.textContent = formatMultiLabel(item);
          saveAll();
        });
        const span = document.createElement("span"); span.textContent = opt;
        row.append(cb, span);
        panel.append(row);
      });
      btnEl.addEventListener("click", function(e){
        e.stopPropagation();
        panel.classList.toggle("open");
      });
      document.addEventListener("click", function(e){
        if(!panel.contains(e.target) && e.target!==btnEl){ panel.classList.remove("open"); }
      });
      el.append(btnEl,panel);
      break;
    }
    case "mapselect":{
      const sel = document.createElement("select");
      (item.map||[]).forEach(function(p){
        const o=document.createElement("option"); o.value=p.label; o.textContent=p.label; sel.append(o);
      });
      var firstLabel = (item.map && item.map[0]) ? item.map[0].label : "";
      sel.value = item.value || firstLabel;
      sel.addEventListener("change", function(){ item.value=sel.value; saveAll(); });
      el = sel; break;
    }
    case "mapmultiselect":{
      el = document.createElement("div"); el.className="mshell";
      const btnEl = document.createElement("button"); btnEl.type="button"; btnEl.className="ms-btn";
      btnEl.textContent = formatMultiLabelMap(item);
      const panel = document.createElement("div"); panel.className="ms-panel";
      (item.map||[]).forEach(function(p){
        const row = document.createElement("label"); row.className="ms-item";
        const cb = document.createElement("input"); cb.type="checkbox";
        cb.checked = (Array.isArray(item.value) && item.value.indexOf(p.label)!==-1);
        cb.addEventListener("change", function(){
          let arr = Array.isArray(item.value) ? item.value.slice() : [];
          if(cb.checked){ if(arr.indexOf(p.label)===-1) arr.push(p.label); }
          else{ arr = arr.filter(function(v){return v!==p.label;}); }
          item.value = arr;
          btnEl.textContent = formatMultiLabelMap(item);
          saveAll();
        });
        const span = document.createElement("span"); span.textContent = p.label;
        row.append(cb, span);
        panel.append(row);
      });
      btnEl.addEventListener("click", function(e){
        e.stopPropagation();
        panel.classList.toggle("open");
      });
      document.addEventListener("click", function(e){
        if(!panel.contains(e.target) && e.target!==btnEl){ panel.classList.remove("open"); }
      });
      el.append(btnEl,panel);
      break;
    }
    case "buttons":{
      const wrap = document.createElement("div"); wrap.style.display="flex"; wrap.style.flexWrap="wrap"; wrap.style.gap="6px";
      (item.buttons||[]).forEach(function(btnDef){
        const b = document.createElement("button"); b.type="button"; b.className="btn small";
        b.textContent = btnDef.label || "Run";
        b.addEventListener("click", function(){
          try{
            const ctx = { boxes, savedBoxes, textTemplates, snippets, scripts, copyAllFn: doCopyAll, saveAll: saveAll, render: render, alert: alert, console: console };
            // eslint-disable-next-line no-new-func
            const fn = new Function("ctx", btnDef.code || "");
            fn(ctx);
          }catch(err){
            alert("Button script error: " + err);
          }
        });
        wrap.append(b);
      });
      el = wrap; break;
    }
    default:{
      el = document.createElement("input"); el.type="text";
      el.placeholder=item.placeholder||"";
      el.addEventListener("input", function(e){ item.value=e.target.value; saveAll(); });
    }
  }
  return el;
}

function formatMultiLabel(item){
  const sep = (item.sep != null ? item.sep : ",");
  const arr = Array.isArray(item.value) ? item.value : [];
  if(arr.length===0) return "Select…";
  return arr.join(sep+" ");
}
function formatMultiLabelMap(item){
  const sep = (item.sep != null ? item.sep : ",");
  const arr = Array.isArray(item.value) ? item.value : [];
  if(arr.length===0) return "Select…";
  return arr.join(sep+" ");
}

/* ========= Box ops ========= */
function moveBox(id, delta){
  const idx = boxes.findIndex(function(b){return b.id===id;});
  const tgt = idx + delta;
  if(tgt<0 || tgt>=boxes.length) return;
  const tmp = boxes[idx]; boxes[idx] = boxes[tgt]; boxes[tgt] = tmp;
  saveAll(); render();
}
function removeBox(id){
  boxes = boxes.filter(function(b){return b.id!==id;});
  saveAll(); render();
}

/* ========= Save Layout Template ========= */
function deepCloneBox(box){ return JSON.parse(JSON.stringify(box)); }
function saveBoxTemplate(box){
  const cleaned = deepCloneBox(box);
  (cleaned.fields||[]).forEach(function(f){ (f.items||[]).forEach(function(it){
    // reset values when saving layout
    if(it.type==="multiselect" || it.type==="chips" || it.type==="mapmultiselect") it.value = [];
    else if(it.type==="checkbox") it.value = false;
    else if(it.type==="range") it.value = 50;
    else if(it.type==="timerange" || it.type==="daterange") it.value = {start:"", end:""};
    else it.value = "";
  });});
  const tpl = { id: uid(), title: cleaned.title, w: cleaned.w, fields: cleaned.fields };
  savedBoxes.push(tpl);
  saveAll();
  toast('Saved "' + (tpl.title||"Box") + '"');
}

/* ========= Add Box / Field ========= */
function safeShowDialog(dlg){
  try{
    if(dlg && typeof dlg.showModal === "function"){ dlg.showModal(); return; }
  }catch(_){}
  if(!dlg) return;
  dlg.setAttribute("open","open");
}
function safeCloseDialog(dlg){
  try{
    if(dlg && typeof dlg.close === "function"){ dlg.close(); return; }
  }catch(_){}
  if(!dlg) return;
  dlg.removeAttribute("open");
}

on(addBoxBtn, "click", function(){
  if(!isEditMode){ return toast("Unlock to add boxes."); }
  if(boxTitle) boxTitle.value="";
  if(boxW) boxW.value="6";
  safeShowDialog(boxDialog);
});

on($("createBoxBtn"), "click", function(e){
  e.preventDefault();
  const model = {
    id: uid(),
    title: (boxTitle && boxTitle.value || "").trim() || "Untitled",
    w: parseInt(boxW && boxW.value,10)||6,
    fields:[]
  };
  boxes.push(model);
  saveAll(); render();
  safeCloseDialog(boxDialog);
});

function openFieldDialog(){
  if(fldLabel) fldLabel.value="";
  if(fldSpan) fldSpan.value="12";
  if(subsWrap) subsWrap.innerHTML="";
  dialogSubs = [];
  addSub();
  safeShowDialog(fieldDialog);
}

// Sub-inputs in dialog (stacked)
let dialogSubs = [];
on(addSubBtn, "click", function(e){ e.preventDefault(); addSub(); });

function addSub(){
  const sub = { id: uid(), type: "text", copyBefore: "", copyAfter: "", options: [], map: [], placeholder:"", sep:"," };
  dialogSubs.push(sub);
  drawSubs();
}

function drawSubs(){
  if(!subsWrap) return;
  subsWrap.innerHTML="";
  dialogSubs.forEach(function(sub, idx){
    const block = document.createElement("div");
    block.className="stack";
    block.style.border="1px dashed #ddd";
    block.style.borderRadius="8px";
    block.style.padding="8px";

    const row = document.createElement("div"); row.className="row";

    const colL = document.createElement("div"); colL.className="col stack";
    const typeSel = document.createElement("select");
    TYPE_OPTIONS.forEach(function(pair){ const v=pair[0], t=pair[1]; const o=document.createElement("option"); o.value=v; o.textContent=t; if(sub.type===v) o.selected=true; typeSel.append(o); });
    typeSel.addEventListener("change", function(e){
      sub.type=e.target.value;
      if(sub.type==="multiselect"||sub.type==="chips"||sub.type==="mapmultiselect"){ sub.value=[]; }
      if(sub.type==="select"||sub.type==="multiselect"){ sub.options=sub.options||[]; }
      if(sub.type==="mapselect"||sub.type==="mapmultiselect"){ sub.map=sub.map||[]; }
      if(sub.sep==null) sub.sep=",";
      drawSubs();
    });
    const phIn = document.createElement("input"); phIn.type="text"; phIn.placeholder="Placeholder…"; phIn.value=sub.placeholder||"";
    phIn.addEventListener("input",function(){ sub.placeholder=phIn.value; });
    const sepIn = document.createElement("input"); sepIn.type="text"; sepIn.placeholder="Separator"; sepIn.value=(sub.sep!=null?sub.sep:",");
    sepIn.addEventListener("input",function(){ sub.sep=sepIn.value; });

    colL.append(labelWrap("Type", typeSel), labelWrap("Placeholder", phIn));
    if(sub.type==="multiselect"||sub.type==="mapmultiselect"||sub.type==="chips"){
      colL.append(labelWrap("Separator", sepIn));
    }

    const colR = document.createElement("div"); colR.className="col stack";
    const taB = document.createElement("textarea"); taB.placeholder="Copy BEFORE…"; taB.value=sub.copyBefore||"";
    taB.addEventListener("input", function(e){ sub.copyBefore=e.target.value; });
    const taA = document.createElement("textarea"); taA.placeholder="Copy AFTER…"; taA.value=sub.copyAfter||"";
    taA.addEventListener("input", function(e){ sub.copyAfter=e.target.value; });
    colR.append(labelWrap("Copy Before", taB), labelWrap("Copy After", taA));

    row.append(colL,colR);
    block.append(row);

    if(sub.type==="select" || sub.type==="multiselect"){
      const edit = document.createElement("div"); edit.className="options-edit";
      (sub.options||[]).forEach(function(opt,i){
        const chip=document.createElement("span"); chip.className="pill"; chip.textContent=opt;
        const up=document.createElement("button"); up.type="button"; up.textContent="↑";
        const dn=document.createElement("button"); dn.type="button"; dn.textContent="↓";
        const rm=document.createElement("button"); rm.type="button"; rm.textContent="×";
        up.addEventListener("click",function(){ if(i>0){ const t=sub.options[i]; sub.options.splice(i,1); sub.options.splice(i-1,0,t); drawSubs(); }});
        dn.addEventListener("click",function(){ if(i<sub.options.length-1){ const t=sub.options[i]; sub.options.splice(i,1); sub.options.splice(i+1,0,t); drawSubs(); }});
        rm.addEventListener("click",function(){ sub.options=sub.options.filter(function(v){return v!==opt;}); drawSubs(); });
        chip.append(up,dn,rm); edit.append(chip);
      });
      const row2 = document.createElement("div"); row2.className="options-row";
      const inp = document.createElement("input"); inp.type="text"; inp.placeholder="Add option…";
      const add = document.createElement("button"); add.className="btn small"; add.textContent="Add"; add.type="button";
      add.addEventListener("click",function(){ const v=(inp.value||"").trim(); if(!v) return; sub.options=sub.options||[]; if(sub.options.indexOf(v)===-1) sub.options.push(v); inp.value=""; drawSubs(); });
      row2.append(inp,add);
      block.append(edit,row2);
    }

    if(sub.type==="mapselect" || sub.type==="mapmultiselect"){
      sub.map = sub.map || [];
      const list = document.createElement("div"); list.className="stack";
      (sub.map).forEach(function(pair,i){
        const r = document.createElement("div"); r.className="map-row";
        const label = document.createElement("input"); label.type="text"; label.placeholder="Option label"; label.value=pair.label||"";
        const text  = document.createElement("input"); text.type="text"; text.placeholder="Custom text to copy"; text.value=pair.text||"";
        const up=document.createElement("button"); up.type="button"; up.className="btn small outline"; up.textContent="↑";
        const dn=document.createElement("button"); dn.type="button"; dn.className="btn small outline"; dn.textContent="↓";
        const rm=document.createElement("button"); rm.type="button"; rm.className="btn small outline"; rm.textContent="×";
        label.addEventListener("input", function(){ pair.label=label.value; });
        text.addEventListener("input", function(){ pair.text=text.value; });
        up.addEventListener("click",function(){ if(i>0){ const t=sub.map[i]; sub.map.splice(i,1); sub.map.splice(i-1,0,t); drawSubs(); }});
        dn.addEventListener("click",function(){ if(i<sub.map.length-1){ const t=sub.map[i]; sub.map.splice(i,1); sub.map.splice(i+1,0,t); drawSubs(); }});
        rm.addEventListener("click", function(){ sub.map.splice(i,1); drawSubs(); });
        r.append(label,text,up,dn,rm); list.append(r);
      });
      const addR = document.createElement("div"); addR.className="map-add";
      const lIn = document.createElement("input"); lIn.type="text"; lIn.placeholder="Option label…";
      const tIn = document.createElement("input"); tIn.type="text"; tIn.placeholder="Custom text…";
      const addBtn = document.createElement("button"); addBtn.type="button"; addBtn.className="btn small"; addBtn.textContent="Add";
      addBtn.addEventListener("click", function(){ const L=(lIn.value||"").trim(); const T=(tIn.value||"").trim(); if(!L) return; sub.map.push({label:L,text:T}); lIn.value=""; tIn.value=""; drawSubs(); });
      addR.append(lIn,tIn,addBtn);
      block.append(list, addR);
    }

    const delRow=document.createElement("div"); delRow.style.display="flex"; delRow.style.justifyContent="flex-end"; delRow.style.marginTop="6px";
    const delBtn=document.createElement("button"); delBtn.type="button"; delBtn.className="btn small outline"; delBtn.textContent="Remove Input";
    delBtn.addEventListener("click",function(){ dialogSubs.splice(idx,1); drawSubs(); });
    delRow.append(delBtn);
    block.append(delRow);

    subsWrap.append(block);
  });
}

function initValueForType(t){
  if(t==="multiselect" || t==="chips" || t==="mapmultiselect") return [];
  if(t==="checkbox") return false;
  if(t==="range") return 50;
  if(t==="timerange" || t==="daterange") return {start:"", end:""};
  return "";
}

on($("createFieldBtn"), "click", function(e){
  e.preventDefault();
  if(!targetBoxIdForNewField){ safeCloseDialog(fieldDialog); return; }
  if(dialogSubs.length===0){ toast("Add at least one input."); return; }

  const box = boxes.find(function(b){return b.id===targetBoxIdForNewField;});
  const field = {
    id: uid(),
    label: (fldLabel && fldLabel.value || "").trim() || "Field",
    span: parseInt(fldSpan && fldSpan.value,10)||12,
    items: dialogSubs.map(function(s){
      return {
        id: uid(),
        type: s.type,
        options: (s.type==="select" || s.type==="multiselect") ? (s.options||[]) : [],
        map: (s.type==="mapselect" || s.type==="mapmultiselect") ? (s.map||[]) : undefined,
        buttons: (s.type==="buttons") ? [] : undefined,
        value: initValueForType(s.type),
        copyBefore: s.copyBefore || "",
        copyAfter: s.copyAfter || "",
        placeholder: s.placeholder || "",
        sep: (s.sep!=null ? s.sep : ",")
      };
    })
  };
  (box.fields||[]).push(field);
  targetBoxIdForNewField=null; dialogSubs=[]; safeCloseDialog(fieldDialog);
  saveAll(); render();
});

/* ========= Free Note ========= */
on(noteBtn, "click", function(){ if(freeNote) freeNote.value=""; safeShowDialog(noteDialog); });
on($("saveNoteBtn"), "click", function(e){
  e.preventDefault();
  const txt = (freeNote && freeNote.value || "").trim();
  if(!txt){ safeCloseDialog(noteDialog); return; }
  boxes.push({
    id: uid(), title:"Note", w: 6,
    fields:[ {
      id: uid(), label:"Note", span:12,
      items:[ {id: uid(), type:"textarea", options:[], value: txt, copyBefore:"", copyAfter:"", placeholder:""} ]
    } ]
  });
  saveAll(); render(); safeCloseDialog(noteDialog);
});

/* ========= Copy / Clear / Export / Import ========= */
on(copyAllBtn, "click", function(){ doCopyAll(); });

function doCopyAll(){
  let out = "";
  boxes.forEach(function(b){
    (b.fields||[]).forEach(function(f){
      (f.items||[]).forEach(function(item){
        const val = formatItemValue(item);
        const has = itemHasValue(item, val);
        if(!has) return; // skip entirely if nothing selected/entered
        const pre = toText(item.copyBefore || "");
        const post = toText(item.copyAfter || "");
        out += pre + val + post;
      });
    });
  });
  try{
    navigator.clipboard.writeText(out).then(function(){ toast("Copied."); }, function(){ copyFallback(out); });
  }catch(_){ copyFallback(out); }
  return out;
}
function copyFallback(text){
  const ta = document.createElement("textarea");
  ta.value=text; document.body.appendChild(ta); ta.select();
  try{ document.execCommand("copy"); toast("Copied."); }catch(_){ alert("Copy failed. Text is in a popup."); alert(text); }
  document.body.removeChild(ta);
}

function itemHasValue(item, formatted){
  switch(item.type){
    case "multiselect":
    case "chips":
    case "mapmultiselect":
      return Array.isArray(item.value) && item.value.length>0;
    case "checkbox":
      return !!item.value; // only include when checked
    case "timerange":
    case "daterange":
      if(!item.value) return false;
      return !!(item.value.start || item.value.end);
    case "buttons":
      return false; // buttons don't copy
    default:
      return !!(formatted && String(formatted).trim());
  }
}

function toText(s){ return (s||"").replace(/\\n/g, "\n"); }
function formatItemValue(item){
  if(item.type==="mapselect"){
    const p = (item.map||[]).find(function(m){return m.label===item.value;});
    return p ? (p.text||"") : (item.value||"");
  }
  if(item.type==="mapmultiselect"){
    const sep = (item.sep != null ? item.sep : ",");
    const labels = Array.isArray(item.value) ? item.value : [];
    const texts = labels.map(function(L){
      const p=(item.map||[]).find(function(m){return m.label===L;});
      return p ? (p.text||"") : L;
    });
    return texts.join(sep+" ");
  }
  if(item.type==="multiselect" || item.type==="chips"){
    const sep = (item.sep != null ? item.sep : ",");
    const arr = Array.isArray(item.value) ? item.value : [];
    return arr.join(sep+" ");
  }
  if(item.type==="checkbox"){
    return item.value ? "Yes" : ""; // only include when checked (blank otherwise)
  }
  if(item.type==="timerange" || item.type==="daterange"){
    const v=item.value||{start:"",end:""};
    if(!(v.start||v.end)) return "";
    return (v.start||"") + ((v.start||v.end)? " - " : "") + (v.end||"");
  }
  if(item.type==="buttons"){
    return "";
  }
  return (item.value!=null?item.value:"").toString();
}

on(clearAllBtn, "click", function(){
  if(!confirm("Clear all field values (layout stays)?")) return;
  boxes.forEach(function(b){ (b.fields||[]).forEach(function(f){
    (f.items||[]).forEach(function(it){
      if(it.type==="multiselect" || it.type==="chips" || it.type==="mapmultiselect") it.value=[];
      else if(it.type==="checkbox") it.value=false;
      else if(it.type==="range") it.value=50;
      else if(it.type==="timerange" || it.type==="daterange") it.value={start:"",end:""};
      else it.value="";
    });
  });});
  saveAll(); render();
});

// EXPORT: full pack
on(exportBtn, "click", function(){
  if(!isEditMode){ return toast("Unlock to export."); }
  const blob = new Blob([JSON.stringify(packState(), null, 2)], {type:"application/json"});
  const url = URL.createObjectURL(blob);
  const a = document.createElement("a");
  a.href = url; a.download = "notes-export.json"; a.click();
  URL.revokeObjectURL(url);
});

// IMPORT
on(importBtn, "click", function(){
  if(!isEditMode){ return toast("Unlock to import."); }
  const inp = document.createElement("input");
  inp.type="file"; inp.accept="application/json";
  inp.addEventListener("change", function(){
    const file = (inp.files && inp.files[0]) ? inp.files[0] : null; if(!file) return;
    file.text().then(function(txt){
      try{
        const data = JSON.parse(txt);
        if(Array.isArray(data)){
          boxes = data;
        }else if(data && typeof data==="object"){
          boxes = Array.isArray(data.boxes) ? data.boxes : [];
          savedBoxes = Array.isArray(data.savedBoxes) ? data.savedBoxes : [];
          textTemplates = Array.isArray(data.textTemplates) ? data.textTemplates : [];
          snippets = Array.isArray(data.snippets) ? data.snippets : [];
          scripts  = Array.isArray(data.scripts)  ? data.scripts  : [];
          isEditMode = (data.mode === "edit" || data.mode === "view") ? (data.mode==="edit") : isEditMode;
        }else{
          throw new Error("Invalid JSON shape");
        }
        boxes.forEach(function(b){ if(typeof b.w!=="number") b.w = 12; });
        saveAll(); updateModeClass(); render(); drawSidebarList(); positionToggle();
        toast("Imported.");
      }catch(err){ alert("Invalid JSON.\n" + err); }
    });
  });
  inp.click();
});

/* ========= Saved Boxes Picker ========= */
on(openSavedBtn, "click", function(){
  drawSavedList();
  safeShowDialog(savedDialog);
});

function drawSavedList(){
  if(!savedList) return;
  savedList.innerHTML = "";
  if(!savedBoxes.length){
    const empty = document.createElement("div");
    empty.className = "muted";
    empty.textContent = "No saved boxes yet. Unlock and use a box's Save button to store it here.";
    savedList.append(empty);
    return;
  }
  savedBoxes.forEach(function(tpl, idx){
    const row = document.createElement("div");
    row.style.display="flex";
    row.style.justifyContent="space-between";
    row.style.alignItems="center";
    row.style.border="1px solid #eee";
    row.style.borderRadius="8px";
    row.style.padding="8px 10px";
    const info = document.createElement("div");
    info.innerHTML = "<strong>"+escapeHtml(tpl.title || "Untitled")+"</strong> <span class=\"muted\" style=\"margin-left:8px;\">Width "+pctFromCols(tpl.w)+"</span>";
    const act = document.createElement("div");
    const up = btn("↑","small outline edit-only", function(){ if(idx>0){ const t=savedBoxes[idx]; savedBoxes.splice(idx,1); savedBoxes.splice(idx-1,0,t); saveAll(); drawSavedList(); }});
    const dn = btn("↓","small outline edit-only", function(){ if(idx<savedBoxes.length-1){ const t=savedBoxes[idx]; savedBoxes.splice(idx,1); savedBoxes.splice(idx+1,0,t); saveAll(); drawSavedList(); }});
    const add = btn("Add","small", function(){ insertSavedTemplate(tpl); },"Add this box");
    act.append(up,dn,add);
    row.append(info, act);
    savedList.append(row);
  });
}

function pctFromCols(cols){
  const map={"3":"25%","4":"33%","6":"50%","8":"66%","9":"75%","12":"100%"}; return map[String(cols)]||"";
}

function insertSavedTemplate(tpl){
  const clone = deepCloneBox(tpl);
  clone.id = uid();
  clone.title = tpl.title || "Saved Box";
  clone.canMoveInView = true;
  (clone.fields||[]).forEach(function(f){
    f.id = uid();
    (f.items||[]).forEach(function(it){
      it.id = uid();
      it.value = initValueForType(it.type);
    });
  });
  boxes.push(clone);
  saveAll(); render();
  safeCloseDialog(savedDialog);
  toast('Added "'+(clone.title||"Box")+'"');
}

/* ========= Manage Saved Boxes ========= */
on(manageSavedBtn, "click", function(){
  drawManageList();
  safeShowDialog(manageDialog);
});

function drawManageList(){
  if(!manageList) return;
  manageList.innerHTML = "";
  if(!savedBoxes.length){
    const empty = document.createElement("div");
    empty.className="muted";
    empty.textContent="No saved boxes yet.";
    manageList.append(empty);
    return;
  }
  savedBoxes.forEach(function(tpl, idx){
    const row = document.createElement("div");
    row.style.display="grid";
    row.style.gridTemplateColumns="2fr 1fr auto";
    row.style.gap="10px";
    row.style.alignItems="center";
    row.style.border="1px solid #eee";
    row.style.borderRadius="8px";
    row.style.padding="8px 10px";
    const name = document.createElement("input");
    name.type="text"; name.value=tpl.title||"";
    name.addEventListener("input", function(){ tpl.title = name.value; });

    const wSel = document.createElement("select");
    [["3","25%"],["4","33%"],["6","50%"],["8","66%"],["9","75%"],["12","100%"]].forEach(function(pair){
      const v=pair[0], t=pair[1];
      const o=document.createElement("option"); o.value=v; o.textContent=t; if(String(tpl.w)===v) o.selected=true; wSel.append(o);
    });
    wSel.addEventListener("change", function(){ tpl.w = parseInt(wSel.value,10)||6; });

    const acts = document.createElement("div");
    acts.style.display="flex"; acts.style.gap="6px"; acts.style.justifyContent="flex-end";
    const up = btn("↑","small outline", function(){ if(idx>0){ const t=savedBoxes[idx]; savedBoxes.splice(idx,1); savedBoxes.splice(idx-1,0,t); drawManageList(); }});
    const down = btn("↓","small outline", function(){ if(idx<savedBoxes.length-1){ const t=savedBoxes[idx]; savedBoxes.splice(idx,1); savedBoxes.splice(idx+1,0,t); drawManageList(); }});
    const preview = btn("Add to Canvas","small outline", function(){ insertSavedTemplate(tpl); },"Add this template below");
    const del = btn("Delete","small outline", function(){
      if(!confirm('Delete saved box "'+(tpl.title||"Untitled")+'"?')) return;
      savedBoxes.splice(idx,1); drawManageList();
    },"Delete this saved box");
    acts.append(up,down,preview, del);

    row.append(name, wSel, acts);
    manageList.append(row);
  });
}

on(saveManageBtn, "click", function(e){
  e.preventDefault();
  saveAll();
  safeCloseDialog(manageDialog);
  toast("Saved changes.");
});

/* ========= Title Dropdown Templates ========= */
function schemaSignatureForBox(box){
  const parts = [];
  (box.fields||[]).forEach(function(f, fi){
    const flabel = (f.label||"").trim().toLowerCase().replace(/\s+/g,' ');
    parts.push("F"+fi+":"+flabel);
    (f.items||[]).forEach(function(it, ii){
      parts.push("I"+fi+"."+ii+":"+it.type);
    });
  });
  return parts.join("|");
}

function collectTextEntriesByPath(box){
  const out = [];
  (box.fields||[]).forEach(function(f, fi){
    (f.items||[]).forEach(function(it, ii){
      if(it.type==="text" || it.type==="textarea"){
        const path = fi+"."+ii;
        const txt  = (it.value!=null?it.value:"").toString();
        out.push({ path: path, text: txt });
      }
    });
  });
  return out;
}

function toggleTitleDD(box, anchorEl){
  if(ddOpenForBoxId === box.id){ closeTitleDD(); return; }
  openTitleDD(box, anchorEl);
}

function openTitleDD(box, anchorEl){
  ddOpenForBoxId = box.id;
  ddAnchorEl = anchorEl;
  const sig = schemaSignatureForBox(box);
  if(tmHeading) tmHeading.textContent = "“"+(box.title || "Untitled")+"”";
  if(tmNewName) tmNewName.value = "";
  drawTitleDDList(sig);

  const rect = anchorEl.getBoundingClientRect();
  const dd = titleDD;
  const margin = 6;
  const vw = document.documentElement.clientWidth;

  dd.style.display = "block";
  const width = dd.offsetWidth || 360;
  dd.style.display = "";

  const left = Math.min(rect.left, vw - width - 12);
  dd.style.top = (rect.bottom + window.scrollY + margin) + "px";
  dd.style.left = (Math.max(12, left + window.scrollX)) + "px";
  dd.classList.add("open");
  dd.setAttribute("aria-hidden","false");
}
function closeTitleDD(){
  ddOpenForBoxId = null;
  ddAnchorEl = null;
  if(!titleDD) return;
  titleDD.classList.remove("open");
  titleDD.setAttribute("aria-hidden","true");
}

function moveTemplateWithinSchema(schemaSig, idx, dir){
  const list = textTemplates.map(function(t,i){return {t:t,i:i};}).filter(function(x){return x.t.schemaSig===schemaSig;});
  if(idx<0 || idx>=list.length) return;
  const aIdx = list[idx].i;
  const bInst = list[idx+dir];
  if(!bInst) return;
  const bIdx = bInst.i;
  const tmp = textTemplates[aIdx];
  textTemplates[aIdx] = textTemplates[bIdx];
  textTemplates[bIdx] = tmp;
  saveAll();
}

function drawTitleDDList(schemaSig){
  if(!tmList) return;
  tmList.innerHTML = "";
  const items = textTemplates.filter(function(t){return t.schemaSig===schemaSig;});
  if(!items.length){
    const empty = document.createElement("div");
    empty.className="muted";
    empty.textContent="No text templates yet for this box type.";
    tmList.append(empty);
    return;
  }
  items.forEach(function(t, visibleIdx){
    const row = document.createElement("div");
    const left = document.createElement("div");
    left.className = "tm-row-left";
    left.innerHTML = "<strong>"+escapeHtml(t.name)+"</strong> <span class=\"muted\">(" + t.entries.length + " entr" + (t.entries.length===1?"y":"ies") + ")</span>";
    const right = document.createElement("div");
    right.style.display="flex"; right.style.gap="6px";
    const upBtn = btn("↑","small outline", function(){ moveTemplateWithinSchema(schemaSig, visibleIdx, -1); drawTitleDDList(schemaSig); },"Move up");
    const dnBtn = btn("↓","small outline", function(){ moveTemplateWithinSchema(schemaSig, visibleIdx, +1); drawTitleDDList(schemaSig); },"Move down");
    const applyBtn = btn("Apply","small", function(){ applyTextTemplateBySchema(t); }, "Append saved text into this box");
    const delBtn   = btn("Delete","small outline", function(){
      if(!confirm('Delete template "'+(t.name||"Template")+'"?')) return;
      const at = textTemplates.findIndex(function(x){return x.id===t.id;});
      if(at>=0){ textTemplates.splice(at,1); saveAll(); drawTitleDDList(schemaSig); }
    }, "Delete this template");
    right.append(upBtn, dnBtn, applyBtn, delBtn);
    row.append(left, right);
    tmList.append(row);
  });
}

on(tmSaveBtn, "click", function(){
  if(!ddOpenForBoxId) return;
  const box = boxes.find(function(b){return b.id===ddOpenForBoxId;});
  if(!box) return;
  const name = (tmNewName && tmNewName.value || "").trim();
  if(!name){ toast("Give the template a name."); return; }
  const schemaSig = schemaSignatureForBox(box);
  const entries = collectTextEntriesByPath(box);
  const tpl = { id: uid(), schemaSig: schemaSig, name: name, entries: entries };
  textTemplates.push(tpl);
  saveAll();
  drawTitleDDList(schemaSig);
  if(tmNewName) tmNewName.value = "";
  toast("Template saved (shared across this box type).");
});

function applyTextTemplateBySchema(tpl){
  if(!ddOpenForBoxId) return;
  const box = boxes.find(function(b){return b.id===ddOpenForBoxId;});
  if(!box){ toast("Box not found."); return; }
  const map = {};
  (tpl.entries||[]).forEach(function(e){ map[e.path] = (e.text || ""); });
  (box.fields||[]).forEach(function(f, fi){
    (f.items||[]).forEach(function(it, ii){
      if(!(it.type==="text" || it.type==="textarea")) return;
      const key = fi+"."+ii;
      if(Object.prototype.hasOwnProperty.call(map, key)){
        const add = map[key];
        if(add==null || add==="") return;
        const cur = (it.value!=null?it.value:"").toString();
        it.value = cur ? (cur + "\n" + add) : add;
      }
    });
  });
  saveAll(); render();
  closeTitleDD();
  toast("Template applied.");
});

document.addEventListener("click", function(e){
  if(titleDD && !titleDD.classList.contains("open")) return;
  if(e.target === ddAnchorEl || (titleDD && titleDD.contains(e.target))) return;
  closeTitleDD();
});
document.addEventListener("keydown", function(e){ if(e.key==="Escape" && titleDD && titleDD.classList.contains("open")) closeTitleDD(); });
window.addEventListener("scroll", function(){ if(titleDD && titleDD.classList.contains("open")) closeTitleDD(); }, true);
window.addEventListener("resize", function(){ if(titleDD && titleDD.classList.contains("open")) closeTitleDD(); positionToggle(); });

/* ========= Drag & Drop (edit mode only) ========= */
function attachDnD(){
  const cards = Array.prototype.slice.call(document.querySelectorAll(".box"));
  let dragEl = null;

  cards.forEach(function(c){
    c.addEventListener("dragstart", function(e){ if(!isEditMode) return e.preventDefault(); dragEl=c; c.classList.add("dragging"); e.dataTransfer.effectAllowed="move"; });
    c.addEventListener("dragend", function(){ if(dragEl){ dragEl.classList.remove("dragging"); dragEl=null; } });
  });

  const container = document.getElementById("canvas");
  if(!container) return;

  container.addEventListener("dragover", function(e){
    if(!isEditMode) return;
    e.preventDefault();
    const after = getCardAfterY(container, e.clientY);
    const draggingId = dragEl ? dragEl.dataset.boxId : null;
    if(!draggingId) return;
    const currentIdx = boxes.findIndex(function(b){return b.id===draggingId;});
    let newIdx;
    if(!after){
      container.appendChild(dragEl);
      newIdx = boxes.length - 1;
    } else {
      container.insertBefore(dragEl, after);
      const afterId = after.dataset.boxId;
      newIdx = boxes.findIndex(function(b){return b.id===afterId;});
    }
    if(newIdx!==currentIdx && newIdx>=0){
      const m = boxes.splice(currentIdx,1)[0];
      boxes.splice(newIdx,0,m);
    }
  });

  container.addEventListener("drop", function(){
    if(!isEditMode) return;
    saveAll(); render();
  });
}

function getCardAfterY(container, y){
  const els = Array.prototype.slice.call(container.querySelectorAll(".box:not(.dragging)"));
  const res = els.reduce(function(closest,child){
    const box = child.getBoundingClientRect();
    const offset = y - box.top - box.height/2;
    if(offset < 0 && offset > closest.offset){ return {offset:offset,element:child}; }
    else return closest;
  }, {offset:Number.NEGATIVE_INFINITY, element:null});
  return res.element;
}

/* ========= Sidebar: Toggle + Tabs (Snippets/Scripts) ========= */
function positionToggle(){
  const cs = getComputedStyle(document.documentElement);
  const swStr = cs.getPropertyValue("--sidebar-w") || "320px";
  const sw = parseInt(swStr,10) || 320;
  if(snipBar && snipBar.classList.contains("open")){
    if(snipToggle){ snipToggle.style.left = sw + "px"; }
    if(snipToggle && snipToggle.querySelector("span")) snipToggle.querySelector("span").textContent = "◀";
    if(snipToggle) snipToggle.title = "Close panel";
  }else{
    if(snipToggle){ snipToggle.style.left = "0px"; }
    if(snipToggle && snipToggle.querySelector("span")) snipToggle.querySelector("span").textContent = "▶";
    if(snipToggle) snipToggle.title = "Open panel";
  }
}
function openSnip(){ if(snipBar){ snipBar.classList.add("open"); snipBar.setAttribute("aria-hidden","false"); } positionToggle(); }
function closeSnip(){ if(snipBar){ snipBar.classList.remove("open"); snipBar.setAttribute("aria-hidden","true"); } positionToggle(); }

on(snipToggle, "click", function(){ if(snipBar && snipBar.classList.contains("open")) closeSnip(); else openSnip(); });
on(snipClose, "click", closeSnip);

on(tabSnippets, "click", function(){ sidebarTab="snippets"; setTabs(); drawSidebarList(); });
on(tabScripts , "click", function(){ sidebarTab="scripts";  setTabs(); drawSidebarList(); });

function setTabs(){
  if(tabSnippets) tabSnippets.classList.toggle("active", sidebarTab==="snippets");
  if(tabScripts ) tabScripts .classList.toggle("active", sidebarTab==="scripts");
  if(snipAddBtn) snipAddBtn.textContent = "Add";
}

on(snipAddBtn, "click", function(){
  if(!isEditMode){ return toast("Unlock to add items."); }
  if(sidebarTab==="snippets"){
    editingSnippetId = null;
    if(snipDlgTitle) snipDlgTitle.textContent = "Add Snippet";
    if(snipTitle) snipTitle.value="";
    if(snipText) snipText.value="";
    safeShowDialog(snippetDialog);
  }else{
    editingScriptId = null;
    if(scriptDlgTitle) scriptDlgTitle.textContent = "Add Script";
    if(scriptTitle) scriptTitle.value="";
    if(scriptText) scriptText.value="";
    safeShowDialog(scriptDialog);
  }
});

// Snippet save
on(snipSaveBtn, "click", function(e){
  e.preventDefault();
  const t = (snipTitle && snipTitle.value || "").trim();
  if(!t) return;
  const body = snipText ? snipText.value : "";
  if(editingSnippetId){
    const s = snippets.find(function(x){return x.id===editingSnippetId;});
    if(s){ s.title=t; s.text=body; }
  }else{
    snippets.push({id: uid(), title: t, text: body});
  }
  saveAll(); drawSidebarList(); safeCloseDialog(snippetDialog);
});

// Script save
on(scriptSaveBtn, "click", function(e){
  e.preventDefault();
  const t = (scriptTitle && scriptTitle.value || "").trim();
  if(!t) return;
  const body = scriptText ? scriptText.value : "";
  if(editingScriptId){
    const s = scripts.find(function(x){return x.id===editingScriptId;});
    if(s){ s.title=t; s.text=body; }
  }else{
    scripts.push({id: uid(), title: t, text: body});
  }
  saveAll(); drawSidebarList(); safeCloseDialog(scriptDialog);
});

// View script dialog closes when clicking outside content
on(scriptViewDialog, "click", function(e){
  if(e.target === scriptViewDialog){ safeCloseDialog(scriptViewDialog); }
});

function drawSidebarList(){
  if(!snipBody) return;
  snipBody.innerHTML = "";
  if(sidebarTab==="snippets"){
    if(!snippets.length){
      const emp = document.createElement("div");
      emp.className="snip-empty";
      emp.textContent="No snippets yet.";
      snipBody.append(emp);
    }else{
      snippets.forEach(function(s, idx){
        const row = document.createElement("div"); row.className="snip-item";
        const title = document.createElement("div"); title.className="snip-title"; title.textContent=s.title;
        title.title = "Click to copy text";
        title.style.cursor="pointer";
        title.addEventListener("click", function(){ if(s.text){ try{ navigator.clipboard.writeText(s.text).then(function(){ toast('Copied \"'+s.title+'\"'); }, function(){ copyFallback(s.text); }); }catch(_){ copyFallback(s.text); } } });
        const acts = document.createElement("div"); acts.className="snip-acts";
        if(isEditMode){
          const up = btn("↑","outline small", function(){ if(idx>0){ const t=snippets[idx]; snippets.splice(idx,1); snippets.splice(idx-1,0,t); saveAll(); drawSidebarList(); }}, "Move up");
          const down = btn("↓","outline small", function(){ if(idx<snippets.length-1){ const t=snippets[idx]; snippets.splice(idx,1); snippets.splice(idx+1,0,t); saveAll(); drawSidebarList(); }}, "Move down");
          const edit = btn("Edit","outline small", function(){ editingSnippetId=s.id; if(snipDlgTitle) snipDlgTitle.textContent="Edit Snippet"; if(snipTitle) snipTitle.value=s.title; if(snipText) snipText.value=s.text||""; safeShowDialog(snippetDialog); }, "Edit");
          const del = btn("Delete","outline small", function(){ if(confirm('Delete "'+(s.title||"Snippet")+'"?')){ snippets.splice(idx,1); saveAll(); drawSidebarList(); }}, "Delete");
          acts.append(up,down,edit,del);
        }
        row.append(title, acts);
        snipBody.append(row);
      });
    }
  }else{
    if(!scripts.length){
      const emp = document.createElement("div");
      emp.className="snip-empty";
      emp.textContent="No scripts yet.";
      snipBody.append(emp);
    }else{
      scripts.forEach(function(s, idx){
        const row = document.createElement("div"); row.className="snip-item";
        const title = document.createElement("div"); title.className="snip-title"; title.textContent=s.title;
        title.title = "Click to view text";
        title.style.cursor="pointer";
        title.addEventListener("click", function(){
          if(scriptViewContent) scriptViewContent.textContent = s.text || "";
          safeShowDialog(scriptViewDialog);
        });
        const acts = document.createElement("div"); acts.className="snip-acts";
        if(isEditMode){
          const up = btn("↑","outline small", function(){ if(idx>0){ const t=scripts[idx]; scripts.splice(idx,1); scripts.splice(idx-1,0,t); saveAll(); drawSidebarList(); }}, "Move up");
          const down = btn("↓","outline small", function(){ if(idx<scripts.length-1){ const t=scripts[idx]; scripts.splice(idx,1); scripts.splice(idx+1,0,t); saveAll(); drawSidebarList(); }}, "Move down");
          const edit = btn("Edit","outline small", function(){ editingScriptId=s.id; if(scriptDlgTitle) scriptDlgTitle.textContent="Edit Script"; if(scriptTitle) scriptTitle.value=s.title; if(scriptText) scriptText.value=s.text||""; safeShowDialog(scriptDialog); }, "Edit");
          const del = btn("Delete","outline small", function(){ if(confirm('Delete "'+(s.title||"Script")+'"?')){ scripts.splice(idx,1); saveAll(); drawSidebarList(); }}, "Delete");
          acts.append(up,down,edit,del);
        }
        row.append(title, acts);
        snipBody.append(row);
      });
    }
  }
}

/* ========= Edit/View toggle ========= */
on(editToggle, "click", function(){
  closeTitleDD();
  isEditMode = !isEditMode;
  saveAll();
  updateModeClass();
  render();
  drawSidebarList();
});

/* ========= Init ========= */
loadAll();
updateModeClass();
render();

setTabs();
drawSidebarList();
positionToggle();

} // end appBoot
</script>
</body>
</html>
